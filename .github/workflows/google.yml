# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to Cloud function

on:
  push:
    branches:
      - main

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - uses: actions/checkout@v3

    - id: auth
      uses: google-github-actions/auth@v0
      with:
        workload_identity_provider: 'projects/93898855020/locations/global/workloadIdentityPools/forgithubactionid/providers/githubid'
        service_account: 'compute-engine-for-github@github-for-personal-build.iam.gserviceaccount.com'
        # credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - id: 'deploy'
      uses: 'google-github-actions/deploy-cloud-functions@v0'
      with:
        name: 'resas_prefecture'
        runtime: 'go116'
        region: asia-northeast2
        description: google function for front end api
        # entry_point: index.js
        ingress_settings: ALLOW_ALL

    # Example of using the output
    - id: 'test'
      run: 'curl "${{ steps.deploy.outputs.url }}"'

  # setup-build-publish-deploy:
  #   name: Setup, Build, Publish, and Deploy
  #   runs-on: ubuntu-latest
  #   environment: production

  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   # Configure Workload Identity Federation and generate an access token.
  #   - id: 'auth'
  #     name: 'Authenticate to Google Cloud'
  #     uses: 'google-github-actions/auth@v0'
  #     with:
  #       token_format: 'access_token'
  #       workload_identity_provider: 'projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
  #       service_account: 'my-service-account@my-project.iam.gserviceaccount.com'

  #   # Alternative option - authentication via credentials json
  #   # - id: 'auth'
  #   #   uses: 'google-github-actions/auth@v0'
  #   #   with:
  #   #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

  #   - name: Docker configuration
  #     run: |-
  #       echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
  #   # Get the GKE credentials so we can deploy to the cluster
  #   - name: Set up GKE credentials
  #     uses: google-github-actions/get-gke-credentials@v0
  #     with:
  #       cluster_name: ${{ env.GKE_CLUSTER }}
  #       location: ${{ env.GKE_ZONE }}

  #   # Build the Docker image
  #   - name: Build
  #     run: |-
  #       docker build \
  #         --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
  #         --build-arg GITHUB_SHA="$GITHUB_SHA" \
  #         --build-arg GITHUB_REF="$GITHUB_REF" \
  #         .
  #   # Push the Docker image to Google Artifact Registry
  #   - name: Publish
  #     run: |-
  #       docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
  #   # Set up kustomize
  #   - name: Set up Kustomize
  #     run: |-
  #       curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
  #       chmod u+x ./kustomize
  #   # Deploy the Docker image to the GKE cluster
  #   - name: Deploy
  #     run: |-
  #       # replacing the image name in the k8s template
  #       ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
  #       ./kustomize build . | kubectl apply -f -
  #       kubectl rollout status deployment/$DEPLOYMENT_NAME
  #       kubectl get services -o wide
